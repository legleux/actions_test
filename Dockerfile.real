# ARG DISTRO=debian:bookworm
ARG DISTRO=ubuntu:jammy
FROM $DISTRO AS base
# FROM debian:12-slim AS base
# SHELL ["/bin/bash", "-c"]
ENV DEBIAN_FRONTEND=noninteractive
# Latest 4.0.0
# Debian
#   bookworm 3.25.2
#   trixie 3.31.6
#   sid 3.31.6
# Ubuntu
#   jammy 3.22.1
#   noble 3.28.3 # latest
#   oracular 3.30.3 # rolling
#   plucky devel

ARG compiler=gcc
ARG gcc_version=11
ARG clang_version=14
ARG build_type=Release
ARG cmake_version=">=3.25,<3.26"
ARG cmake_generator=Ninja
ARG cache_conan=true

ENV compiler=$compiler
ENV gcc_version=$gcc_version
ENV clang_version=$clang_version
ENV build_type=$build_type
ENV cmake_version=$cmake_version
ENV cmake_generator=$cmake_generator

RUN <<EOF
    set -ex
    apt-get update
    apt-get install -y \
        build-essential \
        ninja-build \
        curl \
        git \
        vim \
        ca-certificates \
        gnupg

    apt-get install -y \
        gcc-${gcc_version} \
        g++-${gcc_version} \
        clang-${clang_version} \
        clang++-${clang_version}

    update-alternatives \
        --install /usr/bin/gcc gcc /usr/bin/gcc-${gcc_version} ${gcc_version} \
        --slave /usr/bin/g++ g++ /usr/bin/g++-${gcc_version}

    update-alternatives \
        --install /usr/bin/clang clang /usr/bin/clang-${clang_version} ${clang_version} \
        --slave /usr/bin/clang++ clang++ /usr/bin/clang++-${clang_version}
EOF

# COPY install_cmake.sh install_cmake.sh
# RUN ./install_cmake.sh "${cmake_version}"
# ENV CMAKE_ROOT=/opt/cmake/${cmake_version}/share/cmake-${cmake_version%.*}
# RUN ln -s  /opt/cmake/${cmake_version}/bin/cmake /usr/local/bin/cmake
# RUN apt-get install -y git vim ca-certificates gnupg/
# RUN update-alternatives --install /usr/bin/${compiler} ${compiler} /usr/bin/${compiler}-${compiler_version} ${compiler_version} \
#         --slave /usr/bin/${compiler}++ ${compiler}++ /usr/bin/${compiler}++-${compiler_version}

WORKDIR /root
COPY --from=ghcr.io/astral-sh/uv:0.6.12 /uv /uvx /bin/
# curl -LsSf https://astral.sh/uv/install.sh | sh

# ARG CONAN_PROFILE=default
# ARG CONAN_HOME=/home/conan

# ENV CONAN_HOME="${CONAN_HOME}"
# ENV CONAN_PROFILE="${CONAN_PROFILE}"

RUN UV_TOOL_BIN_DIR=/usr/local/bin uv tool install "conan<2"
RUN UV_TOOL_BIN_DIR=/usr/local/bin uv tool install "cmake ${cmake_version}"

# RUN conan profile detectv
# RUN mkdir -p "${CONAN_HOME}/profiles/"

# COPY <<EOF "${CONAN_HOME}/profiles/${CONAN_PROFILE}"
# cpp_std # TODO: Where to set this?
# # Something more like this?
# # {% set clang = "/usr/bin/clang" %}
# # {% set compiler_version = "16" %}
# if ${}
# {% set compiler, version, compiler_exe = detect_api.detect_default_compiler() %}
# {% set cpp_std = "20" %}
# [settings]
#     arch={{detect_api.detect_arch()}}
#     os={{detect_api.detect_os()}}
#     build_type="${build_type}"
#     compiler={{compiler}}
#     compiler.version={{detect_api.default_compiler_version(compiler, version)}}
#     compiler.libcxx={{detect_api.detect_libcxx(compiler, version, compiler_exe)}}
#     compiler.cppstd={{cpp_std}}
#     # REVIEW: Still needed for clang?
#     tools.build:cxxflags+=["-DBOOST_ASIO_DISABLE_CONCEPTS"]
# [options]
#     &:xrpld=True
#     &:tests=False
# [conf]
#     tools.cmake.cmaketoolchain:generator="${cmake_generator}"
#     # TODO: Set this in a toolchain file to be used instead of here or CC/CXX in env
#     # tools.build:compiler_executables={'c': '{{ clang }}-{{ compiler_version }}','cpp': '{{ clang }}++-{{ compiler_version }}' }

# EOF

# # TODO: Set this correctly via the toolchain
## This shouldn't even be necessary since our screwy CI sets it up.
# ARG COMPILER
# ENV CC=${COMPILER:+clang}
# ENV CXX=${COMPILER:+clang++}
# ENV CC=${CC:-gcc}
# ENV CXX=${CXX:-g++}

# ARG rippled_src="rippled_src"
# ENV RIPPLED_SRC="/root/${rippled_src}"
# ENV BUILD_DIR="/root/build"
# COPY "${rippled_src}" "${RIPPLED_SRC}"

# Build the dependencies
# RUN <<EOF
# RUN --mount=type=cache,id="${compiler}_${compiler_version}_${build_type}",target="${CONAN_HOME}/p" <<EOF
# conan install "${RIPPLED_SRC}" \
#     --output-folder "${BUILD_DIR}" \
#     --build missing \
#     --options xrpld=True \
#     --options tests=True
# # EOF
# # Configure the build system
# # RUN <<EOF
# cmake -S "${RIPPLED_SRC}" \
#     -B "${BUILD_DIR}" \
#     -DCMAKE_VERBOSE_MAKEFILE=ON \
#     -DCMAKE_TOOLCHAIN_FILE="${BUILD_DIR}/build/generators/conan_toolchain.cmake" \
#     -DCMAKE_POLICY_DEFAULT_CMP0091=NEW
# # EOF
# # # ... a bunch of CMake output...
# # # Finally build rippled
# #RUN <<EOF
# cmake --build "${BUILD_DIR}" --parallel 30

# EOF
## docker build . -f Dockerfile.real --build-arg=COMPILER=clang -t clang14
## docker build . -f Dockerfile.real -t gcc11
