
name: ci

on:
  push:
env:
  REGISTRY_IMAGE: ${{ github.repository }}/app

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - amd
          - arm
        include:
          - amd:
            runs_on: ubuntu-22.04
            platform: linux/amd64
          - arm:
            runs_on: ubuntu-22.04-arm
            platform: linux/arm64
    runs-on: ${{ matrix.platform.runs_on }}
    steps:
      - name:
        run: |
          echo ${{ matrix.platform }}
          echo ${{ matrix.runs_on }}
          echo ${{ matrix.platform.platform }}
          echo "github.repository: ${{ github.repository }}"
          echo "github.repository_owner: ${{ github.repository_owner }}"
          echo "github.repository_owner_id${{ github.repository_owner_id }}"

#       - name: Prepare
#         id: get_platform
#         run: |
#           if [ $(uname -a) = "x86_64" ]; then
#               platform=linux/amd64
#           else
#               platform=linux/arm64
#           fi
#           echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
#           echo "platform=${platform}" >> $GITHUB_OUTPUT

#       - name: Docker meta
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.REGISTRY_IMAGE }}

#       # - name: Login to Docker Hub
#       #   uses: docker/login-action@v3
#       #   with:
#       #     username: ${{ vars.DOCKERHUB_USERNAME }}
#       #     password: ${{ secrets.DOCKERHUB_TOKEN }}
#       - name: Login to GitHub Container Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ghcr.io
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Build and push by digest
#         id: build
#         uses: docker/build-push-action@v6
#         with:
#           # platforms: ${{ matrix.platform }}
#           # labels: ${{ steps.meta.outputs.labels }}
#           platforms: ${{ steps.output.get_platform.platform }}
#           labels: ${{ steps.meta.outputs.labels }}
#           tags: ${{ env.REGISTRY_IMAGE }}
#           outputs: type=image,push-by-digest=true,name-canonical=true,push=true

#       - name: Export digest
#         run: |
#           mkdir -p ${{ runner.temp }}/digests
#           digest="${{ steps.build.outputs.digest }}"
#           touch "${{ runner.temp }}/digests/${digest#sha256:}"

#       - name: Upload digest
#         uses: actions/upload-artifact@v4
#         with:
#           name: digests-${{ env.PLATFORM_PAIR }}
#           path: ${{ runner.temp }}/digests/*
#           if-no-files-found: error
#           retention-days: 1

# #   merge:
# #     runs-on: ubuntu-latest
# #     needs:
# #       - build
# #     steps:
# #       - name: Download digests
# #         uses: actions/download-artifact@v4
# #         with:
# #           path: ${{ runner.temp }}/digests
# #           pattern: digests-*
# #           merge-multiple: true

# #       - name: Login to Docker Hub
# #         uses: docker/login-action@v3
# #         with:
# #           username: ${{ vars.DOCKERHUB_USERNAME }}
# #           password: ${{ secrets.DOCKERHUB_TOKEN }}

# #       - name: Set up Docker Buildx
# #         uses: docker/setup-buildx-action@v3

# #       - name: Docker meta
# #         id: meta
# #         uses: docker/metadata-action@v5
# #         with:
# #           images: ${{ env.REGISTRY_IMAGE }}
# #           tags: |
# #             type=ref,event=branch
# #             type=ref,event=pr
# #             type=semver,pattern={{version}}
# #             type=semver,pattern={{major}}.{{minor}}

# #       - name: Create manifest list and push
# #         working-directory: ${{ runner.temp }}/digests
# #         run: |
# #           docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
# #             $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

# #       - name: Inspect image
# #         run: |
# #           docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
