name: Mabuild

on:
  push:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  CONTAINER_REGISTRY: ghcr.io
  BUILDKIT_PROGRESS: plain
  CONAN_VERSION: 2.19.1
  GCOVR_VERSION: 8.3
  CMAKE_VERSION: 3.31.6
  FALLBACK_GCC: 12
  FALLBACK_CLANG: 16

jobs:
  # Build the Docker image for Debian using different versions of GCC and Clang.
  # Note, the `os` part of matrix must be kept in sync with the `merge` job below
  build:
    strategy:
      matrix:
        architecture:
          - platform: linux/amd64
            runner: ubuntu-24.04
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
        os:
          - release: jammy
            compiler_name: gcc
            compiler_version: 12
        #   - release: bullseye
        #     compiler_name: gcc
        #     compiler_version: 12
    runs-on: ${{ matrix.architecture.runner }}
    # container:
        # image: ghcr.io/xrplf/ci/ubuntu-${{ matrix.os.release }}:${{ matrix.os.compiler_name }}-${{ matrix.os.compiler_version}}
    permissions:
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN  }}

      - name: Check
        run: |
          # Convert the repository name to lowercase as the organization name is
          # uppercase, which is not permitted by the Docker registry. It's 2025 and GitHub
          # still does not provide convenient action expression syntax for lowercase.
          GITHUB_REPO=${{ github.repository }}
          CONTAINER_REPO=${GITHUB_REPO@L}
          echo "CONTAINER_REPOSITORY=${CONTAINER_REPO}/debian-${{ matrix.os.release }}" >> $GITHUB_ENV
          echo "CONTAINER_IMAGE=${CONTAINER_REGISTRY}/${CONTAINER_REPO}/debian-${{ matrix.os.release }}" >> $GITHUB_ENV
          PLATFORM=${{ matrix.architecture.platform }}
          echo "PLATFORM_PAIR=${PLATFORM//\//-}" >> $GITHUB_ENV

      - name: Prepare gcc image metadata
        if: ${{ env.CONTAINER_IMAGE_GCC }}
        id: meta-gcc
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,manifest-descriptor
        with:
          images: ${{ env.CONTAINER_IMAGE_GCC }}
          labels: |
            org.opencontainers.image.authors=For inquiries, please use https://${{ github.repository }}/issues
            org.opencontainers.image.documentation=https://${{ github.repository }}
            org.opencontainers.image.vendor=XRPLF
            org.opencontainers.image.title=${{ env.CONTAINER_REPOSITORY_GCC }}
      - name: Build gcc image
        # Note, we always push this image, otherwise steps.build will fail.
        # Also, because we always push it, we intentionally do not tag it.
        # TODO: Move to separate workflow or job
        if: ${{ env.CONTAINER_IMAGE_GCC }}
        id: build-gcc
        uses: docker/build-push-action@v6
        with:
          build-args: |
             BUILDKIT_DOCKERFILE_CHECK=skip=InvalidDefaultArgInFrom
             BUILDKIT_INLINE_CACHE=1
          context: .
          file: Dockerfile.rippled
          outputs: type=image,name=${{ env.CONTAINER_IMAGE_GCC }},push-by-digest=true,name-canonical=true,push=true
          platforms: ${{ matrix.architecture.platform }}
          provenance: mode=max
          push: true
          sbom: true
          labels: ${{ steps.meta-gcc.outputs.labels }}
      - name: Prepare container metadata
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,manifest-descriptor
        with:
          images: ${{ env.CONTAINER_IMAGE }}
          tags: |
            type=raw,value=${{ matrix.os.compiler_name }}-${{ matrix.os.compiler_version }}
            type=sha,prefix=${{ matrix.os.compiler_name }}-${{ matrix.os.compiler_version }}-
          labels: |
            org.opencontainers.image.authors=For inquiries, please use https://${{ github.repository }}/issues
            org.opencontainers.image.documentation=https://${{ github.repository }}
            org.opencontainers.image.vendor=XRPLF
            org.opencontainers.image.title=${{ env.CONTAINER_REPOSITORY }}
#       - name: Build and push the Docker image
#         id: build
#         uses: docker/build-push-action@v6
#         with:
#           build-args: |
#             BUILDKIT_DOCKERFILE_CHECK=skip=InvalidDefaultArgInFrom
#             BUILDKIT_INLINE_CACHE=1
#             CLANG_VERSION=${{ matrix.os.compiler_name == 'clang' && matrix.os.compiler_version || env.FALLBACK_CLANG }}
#             CONAN_VERSION=${{ env.CONAN_VERSION }}
#             GCC_VERSION=${{ matrix.os.compiler_name == 'gcc' && matrix.os.compiler_version || env.FALLBACK_GCC }}
#             GCOVR_VERSION=${{ env.GCOVR_VERSION }}
#             CMAKE_VERSION=${{ env.CMAKE_VERSION }}
#             DEBIAN_VERSION=${{ matrix.os.release }}
#             BASE_IMAGE=${{ env.CONTAINER_IMAGE_GCC && format('{0}@{1}', env.CONTAINER_IMAGE_GCC, steps.build-gcc.outputs.digest) || format('gcc:{0}-{1}', matrix.os.compiler_version, matrix.os.release) }}
#           context: .
#           file: docker/debian/Dockerfile
#           outputs: type=image,name=${{ env.CONTAINER_IMAGE }},push-by-digest=true,name-canonical=true,push=true
#           platforms: ${{ matrix.architecture.platform }}
#           provenance: mode=max
#           push: ${{ github.ref_type == 'branch' && github.ref_name == github.event.repository.default_branch }}
#           sbom: true
#           labels: ${{ steps.meta.outputs.labels }}
#           target: ${{ matrix.os.compiler_name }}
#       - name: Export digest
#         if: ${{ github.ref_type == 'branch' && github.ref_name == github.event.repository.default_branch }}
#         run: |
#           mkdir -p /tmp/digests
#           DIGEST="${{ steps.build.outputs.digest }}"
#           touch "/tmp/digests/${DIGEST#sha256:}"
#       - name: Upload digest
#         if: ${{ github.ref_type == 'branch' && github.ref_name == github.event.repository.default_branch }}
#         uses: actions/upload-artifact@v4
#         with:
#           name: digests-${{ matrix.os.release }}-${{ matrix.os.compiler_name }}-${{ matrix.os.compiler_version }}-${{ env.PLATFORM_PAIR }}
#           path: /tmp/digests/*
#           if-no-files-found: error
#           retention-days: 1

#   merge:
#     if: ${{ github.ref_type == 'branch' && github.ref_name == github.event.repository.default_branch }}
#     strategy:
#       matrix:
#         os:
#           - release: bullseye
#             compiler_name: gcc
#             compiler_version: 12
#           - release: bookworm
#             compiler_name: gcc
#             compiler_version: 12
#           - release: bookworm
#             compiler_name: gcc
#             compiler_version: 13
#           - release: bookworm
#             compiler_name: gcc
#             compiler_version: 14
#           - release: bookworm
#             compiler_name: gcc
#             compiler_version: 15
#           - release: bookworm
#             compiler_name: clang
#             compiler_version: 16
#           - release: bookworm
#             compiler_name: clang
#             compiler_version: 17
#           - release: bookworm
#             compiler_name: clang
#             compiler_version: 18
#           - release: bookworm
#             compiler_name: clang
#             compiler_version: 19
#           - release: bookworm
#             compiler_name: clang
#             compiler_version: 20
#     runs-on: ubuntu-24.04
#     needs:
#       - build
#     permissions:
#       packages: write
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
#       - name: Download digests
#         uses: actions/download-artifact@v4
#         with:
#           path: /tmp/digests
#           pattern: digests-${{ matrix.os.release }}-${{ matrix.os.compiler_name }}-${{ matrix.os.compiler_version }}-*
#           merge-multiple: true
#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#       - name: Login to GitHub Registry
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.CONTAINER_REGISTRY }}
#           username: ${{ github.repository_owner }}
#           password: ${{ secrets.GITHUB_TOKEN  }}
#       - name: Prepare environment
#         run: |
#           GITHUB_REPO=${{ github.repository }}
#           CONTAINER_REPO=${GITHUB_REPO@L}
#           echo "CONTAINER_IMAGE=${CONTAINER_REGISTRY}/${CONTAINER_REPO}/debian-${{ matrix.os.release }}" >> $GITHUB_ENV
#       - name: Prepare container metadata
#         id: meta
#         uses: docker/metadata-action@v5
#         env:
#           DOCKER_METADATA_ANNOTATIONS_LEVELS: index
#         with:
#           images: ${{ env.CONTAINER_IMAGE }}
#           tags: |
#             type=raw,value=${{ matrix.os.compiler_name }}-${{ matrix.os.compiler_version }}
#             type=sha,prefix=${{ matrix.os.compiler_name }}-${{ matrix.os.compiler_version }}-sha-
#       - name: Create manifest list and push
#         working-directory: /tmp/digests
#         run: |
#           eval "docker buildx imagetools create \
#             $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
#             $(jq -cr '.annotations | map("--annotation \"" + . + "\"") | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
#             $(printf '${{ env.CONTAINER_IMAGE }}@sha256:%s ' *)"
#       - name: Inspect image
#         run: |
#           docker buildx imagetools inspect ${{ env.CONTAINER_IMAGE }}:${{ steps.meta.outputs.version }}
